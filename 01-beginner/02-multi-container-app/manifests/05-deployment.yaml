# Deployment for Production-Ready Multi-Container Application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp-deployment
  labels:
    app: webapp
spec:
  replicas: 2
  selector:
    matchLabels:
      app: webapp
  template:
    metadata:
      labels:
        app: webapp
        tier: frontend
    spec:
      # Init container for setup
      initContainers:
      - name: init-setup
        image: busybox:1.35
        command: ['sh', '-c']
        args:
          - |
            echo "Initializing application..."
            echo "Checking dependencies..."
            sleep 5
            echo "Creating shared directory structure..."
            mkdir -p /shared-data/logs
            mkdir -p /shared-data/cache
            echo "Setup completed successfully!"
            echo "$(date): Init container completed" > /shared-data/init.log
        volumeMounts:
        - name: shared-data
          mountPath: /shared-data
      
      # Main application containers
      containers:
      # Frontend Container
      - name: frontend
        image: node:18-alpine
        command: ['sh', '-c']
        args:
          - |
            echo "Starting frontend application..."
            npm install -g serve
            echo '<!DOCTYPE html>
            <html>
            <head>
              <title>Multi-Container App</title>
              <style>
                body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                button { background: #007cba; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; margin: 5px; }
                button:hover { background: #005a8b; }
                .response { background: #f0f0f0; padding: 10px; border-radius: 4px; margin: 10px 0; white-space: pre-wrap; }
              </style>
            </head>
            <body>
              <div class="container">
                <h1>üê≥ Multi-Container Kubernetes App</h1>
                <p>This application demonstrates multiple containers working together in a single Pod.</p>
                
                <h3>Test API Endpoints:</h3>
                <button onclick="testApi(\"/api/status\", \"status\")">Check API Status</button>
                <button onclick="testApi(\"/api/config\", \"config\")">Get Configuration</button>
                <button onclick="testApi(\"/api/logs\", \"logs\")">View Init Logs</button>
                
                <div id="status" class="response" style="display:none;"></div>
                <div id="config" class="response" style="display:none;"></div>
                <div id="logs" class="response" style="display:none;"></div>
                
                <h3>Container Information:</h3>
                <ul>
                  <li><strong>Frontend:</strong> Node.js serving this static content</li>
                  <li><strong>Backend:</strong> Node.js API server handling /api requests</li>
                  <li><strong>Proxy:</strong> Nginx routing traffic between containers</li>
                  <li><strong>Init:</strong> Setup container that ran before main containers</li>
                </ul>
              </div>
              
              <script>
                function testApi(endpoint, elementId) {
                  fetch(endpoint)
                    .then(response => response.text())
                    .then(data => {
                      const element = document.getElementById(elementId);
                      element.textContent = data;
                      element.style.display = \"block\";
                    })
                    .catch(error => {
                      const element = document.getElementById(elementId);
                      element.textContent = \"Error: \" + error.message;
                      element.style.display = \"block\";
                    });
                }
              </script>
            </body>
            </html>' > /app/index.html
            serve -s /app -l 3000
        ports:
        - containerPort: 3000
          name: frontend
        env:
        - name: NODE_ENV
          value: "production"
        - name: API_URL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: api_url
        volumeMounts:
        - name: shared-data
          mountPath: /shared-data
        - name: config-volume
          mountPath: /etc/config
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 10
      
      # Backend Container
      - name: backend
        image: node:18-alpine
        command: ['sh', '-c']
        args:
          - |
            echo "Starting backend API server..."
            cat > /app/server.js << 'EOF'
            const http = require('http');
            const url = require('url');
            const fs = require('fs');
            
            const server = http.createServer((req, res) => {
              const path = url.parse(req.url).pathname;
              
              // Enable CORS
              res.setHeader('Access-Control-Allow-Origin', '*');
              res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');
              res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
              
              console.log(`${new Date().toISOString()} - ${req.method} ${path}`);
              
              if (path === '/api/status') {
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({
                  status: 'healthy',
                  timestamp: new Date().toISOString(),
                  container: 'backend',
                  environment: process.env.NODE_ENV || 'development',
                  uptime: process.uptime(),
                  memory: process.memoryUsage()
                }, null, 2));
              } else if (path === '/api/config') {
                try {
                  const config = fs.readFileSync('/etc/config/app.properties', 'utf8');
                  res.writeHead(200, { 'Content-Type': 'text/plain' });
                  res.end(config);
                } catch (error) {
                  res.writeHead(500, { 'Content-Type': 'application/json' });
                  res.end(JSON.stringify({ error: 'Config not found', details: error.message }));
                }
              } else if (path === '/api/logs') {
                try {
                  const logs = fs.readFileSync('/shared-data/init.log', 'utf8');
                  res.writeHead(200, { 'Content-Type': 'text/plain' });
                  res.end(logs);
                } catch (error) {
                  res.writeHead(404, { 'Content-Type': 'application/json' });
                  res.end(JSON.stringify({ error: 'Logs not found', details: error.message }));
                }
              } else {
                res.writeHead(404, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: 'Not Found', path: path }));
              }
            });
            
            const port = process.env.PORT || 3001;
            server.listen(port, () => {
              console.log(`Backend server running on port ${port}`);
              console.log(`Environment: ${process.env.NODE_ENV}`);
              console.log(`Database User: ${process.env.DB_USERNAME}`);
            });
            EOF
            
            cd /app && node server.js
        ports:
        - containerPort: 3001
          name: backend
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: backend_port
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: db_username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: db_password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: jwt_secret
        volumeMounts:
        - name: shared-data
          mountPath: /shared-data
        - name: config-volume
          mountPath: /etc/config
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /api/status
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/status
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 10
      
      # Nginx Proxy Container
      - name: nginx-proxy
        image: nginx:1.21-alpine
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: shared-data
          mountPath: /var/log/nginx
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
      
      # Volumes
      volumes:
      - name: shared-data
        emptyDir: {}
      - name: config-volume
        configMap:
          name: app-config
      - name: nginx-config
        configMap:
          name: app-config
          items:
          - key: nginx.conf
            path: nginx.conf
      
      # Security context
      securityContext:
        fsGroup: 2000
